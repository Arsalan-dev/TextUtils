{"version":3,"sources":["components/Alerts.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alerts","props","alert","className","type","role","word","str","toLowerCase","charAt","toUpperCase","slice","capitalizeType","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","showAlert","arr","split","i","length","join","filter","element","defaultProps","about","App","setMode","setAlert","message","setTimeout","document","body","toggleMode2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d6d285a3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n\r\n    const capitalizeType =(word)=>{\r\n        const str = word.toLowerCase();\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalizeType (props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-\r\n        link\" href=\"/about\">{props.about}</a>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n        <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Blue Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\n// Used to set types of Props\r\n// isRequired makes it mandatory to pass some value\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\n\r\n// Used to set default values for Props if not passed\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    about: 'About'\r\n  }","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick =()=>{\r\n    //console.log(\"Uppercase was clicked: \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('success', 'Text has been converted to upper case');\r\n  }\r\n\r\n  const handleLoClick =()=>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert('success', 'Text has been converted to lower case');\r\n  }\r\n\r\n  const handleOnChange = (event)=>{\r\n    //console.log(\"On change\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handleCapClick =()=>{\r\n    const arr = text.split(\" \");\r\n\r\n    for (let i = 0; i < arr.length; i++) {    \r\n      arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n    }\r\n    let newText = arr.join(\" \");\r\n    setText(newText);\r\n    props.showAlert('success', 'Text has been converted to capitalized case');\r\n\r\n  }\r\n\r\n  const handleSpaces = ()=>{\r\n    let newText = text.split(/[ ]+/);  //Regex ftn to split on more then one space\r\n    newText = newText.join(\" \");\r\n    setText(newText);\r\n    props.showAlert('success', 'Extra spaces has been removed from text');\r\n  }\r\n\r\n  const handleClearText = ()=>{\r\n    setText(\"\");\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={{color: props.mode===\"light\"?\"black\":\"white\"}}>\r\n      <div>\r\n      <h2>{props.heading}</h2>\r\n      <div className=\"mb-3\">\r\n      <textarea className=\"form-control\" style={{backgroundColor: props.mode==='dark'?'#10284c':'white' ,color: props.mode===\"light\"?\"black\":\"white\"}} value={text} onChange={handleOnChange} id=\"my-box\" rows=\"10\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCapClick}>Capitalize Case</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleSpaces}>Remove Extra Spaces</button>      \r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearText}>Clear Text</button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div className='container my-3' style={{color: props.mode===\"light\"?\"black\":\"white\"}}>\r\n      <h3>Your text Summary</h3>\r\n      <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n      <p>{0.08 * (text.split(\" \").length)} minutes read</p>\r\n      <h3>Preview</h3>\r\n      <p>{text.length>0?text:'Enter your text in the text box to preview here'}</p>\r\n    </div>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n","//import logo from './logo.svg';\nimport React from 'react';\nimport { useState } from 'react/cjs/react.development';\nimport './App.css';\nimport Alerts from './components/Alerts';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n//   import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const[mode, setMode] = useState(\"light\");\n  const[alert, setAlert] = useState(null);\n  \n\n  const showAlert = (type, message)=>{\n    setAlert({type: type,\n    msg: message\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert('success', 'Light mode has been enabled');\n    }\n    else{\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#10284c';\n      showAlert('success', 'Dark mode has been enabled');\n    }\n  }\n\n  const toggleMode2 = ()=>{\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert('success', 'Light mode has been enabled');\n    }\n    else{\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#353636';\n      showAlert('success', 'Dark mode has been enabled');\n    }\n  }\n  \n\n  return (\n    <>\n      {/* <BrowserRouter> */}\n      {/* Navbar imported from Navbar.js component and Props value passed to it */}\n      <Navbar title = \"TextUtils\" mode = {mode} toggleMode = {toggleMode} toggleMode2={toggleMode2}/> \n      <Alerts alert={alert}/>      \n      <div className=\"container my-3\">\n        {/* <Routes> */}\n          {/* <Route path=\"/about\" element={<About mode = {mode} />}/>           */}\n          <TextForm showAlert={showAlert} heading =\"Enter text below to analyze\" mode={mode}/>\n        {/* </Routes> */}\n      </div>\n      {/* </BrowserRouter>   */}\n    </>\n      );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}